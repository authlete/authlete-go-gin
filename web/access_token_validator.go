//
// Copyright (C) 2019 Authlete, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
// either express or implied. See the License for the specific
// language governing permissions and limitations under the
// License.

package web

import (
	"github.com/authlete/authlete-go/api"
	"github.com/authlete/authlete-go/dto"
	"github.com/gin-gonic/gin"
)

type AccessTokenValidator struct {
	Api api.AuthleteApi

	// AccessToken is the access token given to a Validate* function.
	AccessToken string

	// Valid denotes the result of access token validation.
	Valid bool

	// Result is a response from Authlete's /api/auth/introspection API.
	Result *dto.IntrospectionResponse

	// Err is an error that occurred during the call to Authlete's /api/auth/introspection API.
	Err *api.AuthleteError

	// Deny is a function that generates an error response that should be returned to the API caller.
	//
	// The behavior of the `Deny` function varies depending on the result of
	// access token validation.
	Deny func(*gin.Context)
}

func AccessTokenValidator_New(api api.AuthleteApi) *AccessTokenValidator {
	validator := AccessTokenValidator{}
	validator.Init(api)

	return &validator
}

func (self *AccessTokenValidator) Init(api api.AuthleteApi) {
	self.Api = api
	self.reset()
}

func (self *AccessTokenValidator) reset() {
	self.set(``, false, nil, nil, denyNothing)
}

func (self *AccessTokenValidator) set(
	accessToken string, valid bool, result *dto.IntrospectionResponse,
	err *api.AuthleteError, deny func(*gin.Context)) bool {
	self.AccessToken = accessToken
	self.Valid = valid
	self.Result = result
	self.Err = err
	self.Deny = deny

	return valid
}

// Validate validates a given access token.
//
// This method is an alias of ValidateWithParams() method.
//
// ARGS
//
//     accessToken (string): An access token.
//
// RETURNS
//
//     bool: True if the access token is valid.
//
func (self *AccessTokenValidator) Validate(accessToken string) bool {
	req := dto.IntrospectionRequest{}
	req.Token = accessToken

	return self.ValidateWithParams(&req)
}

// Validate validates a given access token with additional validation on scopes.
//
// This method is an alias of ValidateWithParams() method.
//
// ARGS
//
//     accessToken (string): An access token.
//     scopes ([]string): Scopes that the access token should cover.
//
// RETURNS
//
//     bool: True if the access token is valid.
//
func (self *AccessTokenValidator) ValidateWithScopes(accessToken string, scopes []string) bool {
	req := dto.IntrospectionRequest{}
	req.Token = accessToken
	req.Scopes = scopes

	return self.ValidateWithParams(&req)
}

// ValidateWithParams validates a given access token with additional parameters.
//
// This method internally calls Authlete's /api/auth/introspection API to get
// information about the access token. The result of the API call is set to the
// `Result` field.
//
// If the API call failed, the error generated by the API call is set to the
// `Err` field. In addition, false is set to the `Valid` field and a function
// that generates an error response (500 Internal Server Error) is set to the
// `Deny` field. The function can be used to generate an error response which
// should be returned to the API caller. Then, this method returns false.
//
// If the API call succeeded, the 'action' parameter in the API response is
// checked. If its value is not 'OK', false is set to the `Valid` field and
// a function that generates an error response is set to the 'Deny' field.
// The function can be used to generate an error response which should be
// returned to the API caller. Then, this method returns false.
//
// If and only if the 'action' parameter is 'OK', true is set to the `Valid`
// field and a function that does nothing is set to the `Deny` field. Then,
// this method returns true.
//
// In every case, the value of `params.Token` is set to the `AccessToken`
// field.
//
// ARGS
//
//     params (*dto.IntrospectionRequest): Request parameters for /api/auth/introspection API
//
// RETURNS
//
//     bool: True if the access token is valid.
//
func (self *AccessTokenValidator) ValidateWithParams(params *dto.IntrospectionRequest) bool {
	// Call Authlete's /api/auth/introspection API.
	result, err := self.Api.Introspection(params)
	if err != nil {
		// The API call failed.
		return self.set(params.Token, false, result, err, denyDueToErr)
	}

	// The 'action' parameter in the response from /api/auth/introspection
	// denotes the next action that the API caller should take.
	action := result.Action

	// If the access token is not valid.
	if action != dto.IntrospectionAction_OK {
		deny := buildDenyFromResult(result)
		return self.set(params.Token, false, result, err, deny)
	}

	// The access token is valid.
	return self.set(params.Token, true, result, err, denyNothing)
}

func denyNothing(ctx *gin.Context) {
}

func denyDueToErr(ctx *gin.Context) {
	// The value for the WWW-Authenticate header.
	challenge := `Bearer error="server_error",error_description="Introspection API call failed."`

	// 500 Internal Server Error with a WWW-Authenticate header.
	resutil := ResponseUtility{}
	resutil.WwwAuthenticate(ctx, 500, challenge)
}

func buildDenyFromResult(result *dto.IntrospectionResponse) func(*gin.Context) {
	action := result.Action
	var statusCode int

	switch action {
	case dto.IntrospectionAction_INTERNAL_SERVER_ERROR:
		statusCode = 500
	case dto.IntrospectionAction_BAD_REQUEST:
		statusCode = 400
	case dto.IntrospectionAction_UNAUTHORIZED:
		statusCode = 401
	case dto.IntrospectionAction_FORBIDDEN:
		statusCode = 403
	default:
		statusCode = 500
	}

	// In error cases, the 'responseContent' parameter in the response
	// from Authlete's /api/auth/introspection API contains a value for
	// the WWW-Authenticate header.
	challenge := result.ResponseContent

	// Function that generates an error response with a WWW-Authenticate header.
	return func(ctx *gin.Context) {
		resutil := ResponseUtility{}
		resutil.WwwAuthenticate(ctx, statusCode, challenge)
	}
}
